// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class PaymentProcessed extends ethereum.Event {
  get params(): PaymentProcessed__Params {
    return new PaymentProcessed__Params(this);
  }
}

export class PaymentProcessed__Params {
  _event: PaymentProcessed;

  constructor(event: PaymentProcessed) {
    this._event = event;
  }

  get client(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get merchant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get storeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get usdtEquivalent(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class PaymentContract extends ethereum.SmartContract {
  static bind(address: Address): PaymentContract {
    return new PaymentContract("PaymentContract", address);
  }

  BASIC_PLAN_TRANSACTION_LIMIT(): BigInt {
    let result = super.call(
      "BASIC_PLAN_TRANSACTION_LIMIT",
      "BASIC_PLAN_TRANSACTION_LIMIT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BASIC_PLAN_TRANSACTION_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASIC_PLAN_TRANSACTION_LIMIT",
      "BASIC_PLAN_TRANSACTION_LIMIT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BASIC_PLAN_VOLUME_LIMIT_USDT(): BigInt {
    let result = super.call(
      "BASIC_PLAN_VOLUME_LIMIT_USDT",
      "BASIC_PLAN_VOLUME_LIMIT_USDT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BASIC_PLAN_VOLUME_LIMIT_USDT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASIC_PLAN_VOLUME_LIMIT_USDT",
      "BASIC_PLAN_VOLUME_LIMIT_USDT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  FEE_PERCENTAGE(): BigInt {
    let result = super.call("FEE_PERCENTAGE", "FEE_PERCENTAGE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_PERCENTAGE",
      "FEE_PERCENTAGE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  merchantRegister(): Address {
    let result = super.call(
      "merchantRegister",
      "merchantRegister():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_merchantRegister(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "merchantRegister",
      "merchantRegister():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerContract(): Address {
    let result = super.call("ownerContract", "ownerContract():(address)", []);

    return result[0].toAddress();
  }

  try_ownerContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ownerContract",
      "ownerContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  storeContract(): Address {
    let result = super.call("storeContract", "storeContract():(address)", []);

    return result[0].toAddress();
  }

  try_storeContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "storeContract",
      "storeContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ownerContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _merchantRegisterAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _storeContractAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ProcessPaymentCall extends ethereum.Call {
  get inputs(): ProcessPaymentCall__Inputs {
    return new ProcessPaymentCall__Inputs(this);
  }

  get outputs(): ProcessPaymentCall__Outputs {
    return new ProcessPaymentCall__Outputs(this);
  }
}

export class ProcessPaymentCall__Inputs {
  _call: ProcessPaymentCall;

  constructor(call: ProcessPaymentCall) {
    this._call = call;
  }

  get merchant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get storeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get usdtEquivalent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ProcessPaymentCall__Outputs {
  _call: ProcessPaymentCall;

  constructor(call: ProcessPaymentCall) {
    this._call = call;
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Merchant extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Merchant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Merchant must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Merchant", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Merchant | null {
    return changetype<Merchant | null>(
      store.get_in_block("Merchant", id.toHexString()),
    );
  }

  static load(id: Bytes): Merchant | null {
    return changetype<Merchant | null>(store.get("Merchant", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get isRegistered(): boolean {
    let value = this.get("isRegistered");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isRegistered(value: boolean) {
    this.set("isRegistered", Value.fromBoolean(value));
  }

  get isPremium(): boolean {
    let value = this.get("isPremium");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPremium(value: boolean) {
    this.set("isPremium", Value.fromBoolean(value));
  }

  get storeCount(): BigInt {
    let value = this.get("storeCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set storeCount(value: BigInt) {
    this.set("storeCount", Value.fromBigInt(value));
  }

  get stores(): StoreLoader {
    return new StoreLoader(
      "Merchant",
      this.get("id")!.toBytes().toHexString(),
      "stores",
    );
  }
}

export class Store extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Store entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Store must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Store", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Store | null {
    return changetype<Store | null>(store.get_in_block("Store", id));
  }

  static load(id: string): Store | null {
    return changetype<Store | null>(store.get("Store", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get storeId(): BigInt {
    let value = this.get("storeId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set storeId(value: BigInt) {
    this.set("storeId", Value.fromBigInt(value));
  }

  get merchant(): Bytes {
    let value = this.get("merchant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set merchant(value: Bytes) {
    this.set("merchant", Value.fromBytes(value));
  }

  get acceptedTokens(): Array<string> {
    let value = this.get("acceptedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set acceptedTokens(value: Array<string>) {
    this.set("acceptedTokens", Value.fromStringArray(value));
  }

  get transactionCount(): BigInt {
    let value = this.get("transactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionCount(value: BigInt) {
    this.set("transactionCount", Value.fromBigInt(value));
  }

  get transactionVolume(): BigInt {
    let value = this.get("transactionVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionVolume(value: BigInt) {
    this.set("transactionVolume", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get payments(): PaymentLoader {
    return new PaymentLoader("Store", this.get("id")!.toString(), "payments");
  }
}

export class Payment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Payment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Payment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Payment | null {
    return changetype<Payment | null>(store.get_in_block("Payment", id));
  }

  static load(id: string): Payment | null {
    return changetype<Payment | null>(store.get("Payment", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get client(): Bytes {
    let value = this.get("client");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set client(value: Bytes) {
    this.set("client", Value.fromBytes(value));
  }

  get merchant(): Bytes {
    let value = this.get("merchant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set merchant(value: Bytes) {
    this.set("merchant", Value.fromBytes(value));
  }

  get store(): string {
    let value = this.get("store");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set store(value: string) {
    this.set("store", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get usdtEquivalent(): BigInt {
    let value = this.get("usdtEquivalent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdtEquivalent(value: BigInt) {
    this.set("usdtEquivalent", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class StoreLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Store[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Store[]>(value);
  }
}

export class PaymentLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Payment[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Payment[]>(value);
  }
}

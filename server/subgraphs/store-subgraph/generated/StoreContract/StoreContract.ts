// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class StoreCreated extends ethereum.Event {
  get params(): StoreCreated__Params {
    return new StoreCreated__Params(this);
  }
}

export class StoreCreated__Params {
  _event: StoreCreated;

  constructor(event: StoreCreated) {
    this._event = event;
  }

  get merchant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get storeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StoreContract__storesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTransactionCount(): BigInt {
    return this.value0;
  }

  getTransactionVolume(): BigInt {
    return this.value1;
  }
}

export class StoreContract__viewStoreTransactionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTransactionCount(): BigInt {
    return this.value0;
  }

  getTransactionVolume(): BigInt {
    return this.value1;
  }
}

export class StoreContract extends ethereum.SmartContract {
  static bind(address: Address): StoreContract {
    return new StoreContract("StoreContract", address);
  }

  merchantRegister(): Address {
    let result = super.call(
      "merchantRegister",
      "merchantRegister():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_merchantRegister(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "merchantRegister",
      "merchantRegister():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerContract(): Address {
    let result = super.call("ownerContract", "ownerContract():(address)", []);

    return result[0].toAddress();
  }

  try_ownerContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ownerContract",
      "ownerContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  storeCounts(param0: Address): BigInt {
    let result = super.call("storeCounts", "storeCounts(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_storeCounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "storeCounts",
      "storeCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  storeExists(merchant: Address, storeId: BigInt): boolean {
    let result = super.call(
      "storeExists",
      "storeExists(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(merchant),
        ethereum.Value.fromUnsignedBigInt(storeId),
      ],
    );

    return result[0].toBoolean();
  }

  try_storeExists(
    merchant: Address,
    storeId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "storeExists",
      "storeExists(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(merchant),
        ethereum.Value.fromUnsignedBigInt(storeId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stores(param0: Address, param1: BigInt): StoreContract__storesResult {
    let result = super.call(
      "stores",
      "stores(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new StoreContract__storesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_stores(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<StoreContract__storesResult> {
    let result = super.tryCall(
      "stores",
      "stores(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StoreContract__storesResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  viewStoreTokenAccepted(merchant: Address, storeId: BigInt): Array<Address> {
    let result = super.call(
      "viewStoreTokenAccepted",
      "viewStoreTokenAccepted(address,uint256):(address[])",
      [
        ethereum.Value.fromAddress(merchant),
        ethereum.Value.fromUnsignedBigInt(storeId),
      ],
    );

    return result[0].toAddressArray();
  }

  try_viewStoreTokenAccepted(
    merchant: Address,
    storeId: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "viewStoreTokenAccepted",
      "viewStoreTokenAccepted(address,uint256):(address[])",
      [
        ethereum.Value.fromAddress(merchant),
        ethereum.Value.fromUnsignedBigInt(storeId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  viewStoreTransactions(
    merchant: Address,
    storeId: BigInt,
  ): StoreContract__viewStoreTransactionsResult {
    let result = super.call(
      "viewStoreTransactions",
      "viewStoreTransactions(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(merchant),
        ethereum.Value.fromUnsignedBigInt(storeId),
      ],
    );

    return new StoreContract__viewStoreTransactionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_viewStoreTransactions(
    merchant: Address,
    storeId: BigInt,
  ): ethereum.CallResult<StoreContract__viewStoreTransactionsResult> {
    let result = super.tryCall(
      "viewStoreTransactions",
      "viewStoreTransactions(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(merchant),
        ethereum.Value.fromUnsignedBigInt(storeId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StoreContract__viewStoreTransactionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ownerContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _merchantRegisterAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStoreTransactionVolumeCall extends ethereum.Call {
  get inputs(): AddStoreTransactionVolumeCall__Inputs {
    return new AddStoreTransactionVolumeCall__Inputs(this);
  }

  get outputs(): AddStoreTransactionVolumeCall__Outputs {
    return new AddStoreTransactionVolumeCall__Outputs(this);
  }
}

export class AddStoreTransactionVolumeCall__Inputs {
  _call: AddStoreTransactionVolumeCall;

  constructor(call: AddStoreTransactionVolumeCall) {
    this._call = call;
  }

  get merchant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get storeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get volumeUSDT(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddStoreTransactionVolumeCall__Outputs {
  _call: AddStoreTransactionVolumeCall;

  constructor(call: AddStoreTransactionVolumeCall) {
    this._call = call;
  }
}

export class CreateStoreCall extends ethereum.Call {
  get inputs(): CreateStoreCall__Inputs {
    return new CreateStoreCall__Inputs(this);
  }

  get outputs(): CreateStoreCall__Outputs {
    return new CreateStoreCall__Outputs(this);
  }
}

export class CreateStoreCall__Inputs {
  _call: CreateStoreCall;

  constructor(call: CreateStoreCall) {
    this._call = call;
  }

  get acceptedTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class CreateStoreCall__Outputs {
  _call: CreateStoreCall;

  constructor(call: CreateStoreCall) {
    this._call = call;
  }
}

export class IncrementStoreTransactionCountCall extends ethereum.Call {
  get inputs(): IncrementStoreTransactionCountCall__Inputs {
    return new IncrementStoreTransactionCountCall__Inputs(this);
  }

  get outputs(): IncrementStoreTransactionCountCall__Outputs {
    return new IncrementStoreTransactionCountCall__Outputs(this);
  }
}

export class IncrementStoreTransactionCountCall__Inputs {
  _call: IncrementStoreTransactionCountCall;

  constructor(call: IncrementStoreTransactionCountCall) {
    this._call = call;
  }

  get merchant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get storeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncrementStoreTransactionCountCall__Outputs {
  _call: IncrementStoreTransactionCountCall;

  constructor(call: IncrementStoreTransactionCountCall) {
    this._call = call;
  }
}
